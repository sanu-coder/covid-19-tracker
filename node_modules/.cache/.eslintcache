[{"C:\\Users\\user\\OneDrive\\Desktop\\Covid-19 Tracker\\covid-19-tracker\\src\\index.js":"1","C:\\Users\\user\\OneDrive\\Desktop\\Covid-19 Tracker\\covid-19-tracker\\src\\app.js":"2","C:\\Users\\user\\OneDrive\\Desktop\\Covid-19 Tracker\\covid-19-tracker\\src\\App.js":"3","C:\\Users\\user\\OneDrive\\Desktop\\Covid-19 Tracker\\covid-19-tracker\\src\\Components\\Cards\\Cards.jsx":"4","C:\\Users\\user\\OneDrive\\Desktop\\Covid-19 Tracker\\covid-19-tracker\\src\\Components\\Charts\\Charts.jsx":"5","C:\\Users\\user\\OneDrive\\Desktop\\Covid-19 Tracker\\covid-19-tracker\\src\\Components\\CountryPicker\\CountryPicker.jsx":"6","C:\\Users\\user\\OneDrive\\Desktop\\Covid-19 Tracker\\covid-19-tracker\\src\\api\\index.js":"7"},{"size":145,"mtime":1621695217740,"results":"8","hashOfConfig":"9"},{"size":1249,"mtime":1622819170744,"results":"10","hashOfConfig":"9"},{"size":182,"mtime":1621448588456,"results":"11","hashOfConfig":"9"},{"size":2692,"mtime":1622753378689,"results":"12","hashOfConfig":"9"},{"size":2540,"mtime":1622818589236,"results":"13","hashOfConfig":"9"},{"size":963,"mtime":1622458828775,"results":"14","hashOfConfig":"9"},{"size":1293,"mtime":1622461700722,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1d9c1lp",{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"18"},"C:\\Users\\user\\OneDrive\\Desktop\\Covid-19 Tracker\\covid-19-tracker\\src\\index.js",[],["34","35"],"C:\\Users\\user\\OneDrive\\Desktop\\Covid-19 Tracker\\covid-19-tracker\\src\\app.js",["36"],"C:\\Users\\user\\OneDrive\\Desktop\\Covid-19 Tracker\\covid-19-tracker\\src\\App.js",[],["37","38"],"C:\\Users\\user\\OneDrive\\Desktop\\Covid-19 Tracker\\covid-19-tracker\\src\\Components\\Cards\\Cards.jsx",[],"C:\\Users\\user\\OneDrive\\Desktop\\Covid-19 Tracker\\covid-19-tracker\\src\\Components\\Charts\\Charts.jsx",[],"C:\\Users\\user\\OneDrive\\Desktop\\Covid-19 Tracker\\covid-19-tracker\\src\\Components\\CountryPicker\\CountryPicker.jsx",["39"],"import React,{useEffect,useState} from 'react';\r\nimport {NativeSelect,FormControl, StylesProvider} from '@material-ui/core';\r\nimport styles from './CountryPicker.module.css';\r\nimport {fetch_countries} from '../../api';\r\nconst CountryPicker=({handleCountryChange})=>{\r\n    const [CountryData,setCountryData]=useState([]);\r\n    useEffect(()=>{\r\n       const fetchCountryAPI=async ()=>{\r\n           setCountryData(await fetch_countries());\r\n       }\r\n       fetchCountryAPI();\r\n       \r\n    },[setCountryData]);\r\n    console.log(CountryData);\r\n    return (\r\n        <FormControl className={StylesProvider.formControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e)=>handleCountryChange(e.target.value)}>\r\n                <option value=\"global\">Global</option>\r\n                {CountryData.map((country,i)=> <option key={i} value={country}>{country}</option> )}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\nexport default CountryPicker;","C:\\Users\\user\\OneDrive\\Desktop\\Covid-19 Tracker\\covid-19-tracker\\src\\api\\index.js",["40"],"import axios from 'axios';\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchdata = async(country) => {\r\n    let changeableurl=url;\r\n    if(country){\r\n        changeableurl=`${url}/countries/${country}`;\r\n    }\r\n    if(country=='Global') \r\n    {     changeableurl=url;\r\n          country='';\r\n    }\r\n\r\n    try {\r\n        const { data } = await axios.get(changeableurl);\r\n        const modifiedData = {\r\n            confirmed: data.confirmed,\r\n            recovered: data.recovered,\r\n            deaths: data.deaths,\r\n            lastUpdate: data.lastUpdate,\r\n        }\r\n        return modifiedData;\r\n    } catch (error) {\r\n\r\n    }\r\n}\r\nexport const fetchDailyData = async() => {\r\n    try {\r\n        const { data } = await axios.get(`${url}/daily`);\r\n        const modifiedData1 = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n        }));\r\n        return modifiedData1;\r\n\r\n    } catch (error) {\r\n\r\n    }\r\n}\r\nexport const fetch_countries = async() => {\r\n    try{\r\n        const {data:{countries}}=await axios.get(`${url}/countries`);\r\n        console.log(countries);\r\n        return countries.map((country)=>country.name);\r\n    }\r\n    catch(error){}\r\n    \r\n}",{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":7,"column":8,"nodeType":"47","messageId":"48","endLine":7,"endColumn":19},{"ruleId":"41","replacedBy":"49"},{"ruleId":"43","replacedBy":"50"},{"ruleId":"45","severity":1,"message":"51","line":3,"column":8,"nodeType":"47","messageId":"48","endLine":3,"endColumn":14},{"ruleId":"52","severity":1,"message":"53","line":9,"column":15,"nodeType":"54","messageId":"55","endLine":9,"endColumn":17},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"no-unused-vars","'coronaImage' is defined but never used.","Identifier","unusedVar",["56"],["57"],"'styles' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]